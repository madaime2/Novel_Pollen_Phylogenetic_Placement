# -*- coding: utf-8 -*-
"""Phylogenetic_Placement_Fossil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OTow_GGH8pQR4MZFk7xkYuU0V7XMBkiE
"""

PATH = absolute_path + "/Saved_MLP.pt"
model = torch.load(PATH)
model.eval()
model

# W/O Pseudo-novel taxon

# Average all features per species (for the known species only) to reconstruct species-level phylogenetic tree

import torch
import pandas as pd

df_pseudonovel = pd.read_csv(absolute_path + "/fossil_features", header = None)

X_train_pseudonovel = torch.tensor(df_pseudonovel.values)
X_train_novel= X_train_pseudonovel

print(X_train_pseudonovel.shape)

Genus_List_With_Pseudonovel = GenusList + ["New_Fossil_Type"]

len(Genus_List_With_Pseudonovel)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
X_train_novel = X_train_novel.to(device)
#output_pseudonovel = mlp(X_train_pseudonovels.float())
output = mlp(X_train.float())
output_novel = mlp(X_train_novel.reshape(X_train_novel.shape[0],1,X_train_novel.shape[1]).float())
output_novel.shape
Dataset_With_Known_And_Novel = torch.vstack((output, output_novel))
Dataset_With_Known_And_Novel.shape

#Dataset_With_Known_And_Novel = (Dataset_With_Known_And_Novel-Dataset_With_Known_And_Novel.min())/(Dataset_With_Known_And_Novel.max()/Dataset_With_Known_And_Novel.min())
# k + n scheme

Species_Index = Y;
NumericSpeciesIndex = pd.to_numeric(Species_Index);
Indices_and_Features = np.column_stack((NumericSpeciesIndex, output.cpu().detach().numpy()));
df = pd.DataFrame(data=Indices_and_Features)
Per_Species_Transformed_Features = df.groupby([0,]).mean()
Per_Species_Transformed_Features;


NumericSpeciesIndexNovel  = ["New_Fossil_Type"]


Indices_and_Features_Novel = np.column_stack((NumericSpeciesIndexNovel, output_novel.cpu().detach().numpy()));
df_novel = pd.DataFrame(data= Indices_and_Features_Novel)
df_novel.groupby(by=0,axis = 0)

df_known_averaged_and_Novel = pd.concat([Per_Species_Transformed_Features,df_novel])
df_known_averaged_and_Novel  = df_known_averaged_and_Novel.iloc[: , 1:]

# Distance method to obtain cladogram (ground-truth phylogenetic tree) from the original distance matrix + placement of the novel taxa

import matplotlib
from scipy.cluster.hierarchy import dendrogram, linkage
from matplotlib import pyplot as plt

#df_known_averaged_and_Novel_norm = (df_known_averaged_and_Novel-df_known_averaged_and_Novel.min())/(df_known_averaged_and_Novel.max()-df_known_averaged_and_Novel.min())
linked = linkage(df_known_averaged_and_Novel, "complete", metric = "cosine")

Genera = GenusList + ["New_Fossil_Type"]

labelList = Genera
#plt.figure(figsize=(14, 16), dpi = 500)
plt.figure(figsize=(6, 9), dpi = 150)
matplotlib.rc('xtick', labelsize=8) 
matplotlib.rc('ytick', labelsize=8) 
dendrogram(linked,
            orientation='left',
            labels=labelList,
            distance_sort='descending',
            show_leaf_counts=True)

# Save cosine distance matrix separating novel specimens from known taxa 

known_and_Novel_Features = np.array(df_known_averaged_and_Novel)
known_and_Novel_Features = known_and_Novel_Features.astype(float)
known_and_Novel_Features = torch.tensor(known_and_Novel_Features)
known_and_Novel_Features_dist = 1-sim_matrix(known_and_Novel_Features,known_and_Novel_Features)